<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="CropPlanning" default="default" basedir=".">
    <description>Builds, tests, and runs the project CropPlanning.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="CropPlanning-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->


 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
 <!-- Generate properties files and init some dist variables.                -->
 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="-pre-jar">

    <!-- this will always be one higher than the ${build.number} property -->
    <buildnumber file="buildnumber.properties"/>

    <propertyfile file="appinfo.properties"
                  comment="Everything can be manually updated except buildnum and builddate.">
      <entry key="program.PROGNAME" default="${main.class}" />
      <entry key="program.AUTHOR" default="" />
      <entry key="program.COMPANY" default="" />
      <entry key="program.COPYRIGHT" default="now" type="date" pattern="yyyy" />
      <entry key="program.WEBSITE" default="" />
      <entry key="program.DESCRIPTION" default="" />
      <entry key="program.VERSION" default="1.0.0" />
      <entry key="program.BUILDNUM" value="${build.number}" />
      <entry key="program.BUILDDATE" type="date" value="now" pattern="yyyyMMDDHHmmss" />
    </propertyfile>

    <loadproperties srcfile="appinfo.properties" />

    <propertyfile file="twinkle.properties"
                  comment="Automatically generated at build.  Needed for twinkle updates.">
      <entry key="software.name" value="${program.DESCRIPTION}" />
      <entry key="software.author" value="${program.AUTHOR}" />
      <entry key="software.copyright" value="${program.COPYRIGHT}" />
      <entry key="software.website" value="${program.WEBSITE}" />
      <entry key="software.version" value="${program.VERSION}" />
      <entry key="software.about.image" value="wheelhoe-for-twinkle.png" />
      <entry key="software.revision" value="1" />
      <entry key="software.build.date" value="${program.BUILDDATE}" />
      <entry key="software.build.number" value="${program.BUILDNUM}" />
    </propertyfile>

    <copy file="appinfo.properties" todir="${build.classes.dir}"/>
    <copy file="log4j.properties" todir="${build.classes.dir}"/>
    <copy file="twinkle.properties" todir="${build.classes.dir}"/>
    <copy file="wheelhoe-for-twinkle.png" todir="${build.classes.dir}"/>

  </target>



 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
 <!-- A slug target the just depends on the targets that do the real work.   -->
 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="dist" depends="init,-dist-init,-dist-clean,dist-jarbundler,dist-launch4j,dist-appcast" />


 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
 <!-- Define our staging folder  -->
 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="-dist-init" depends="init,-dist-init-version-prop">
    <property name="stage.dir" value="${dist.dir}/stage" />
    <property name="local.stage.dir" value="${stage.dir}/${application.title}-${version.prop}" />
  </target>


 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
 <!-- Define the version number for the app. -->
 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
   <target name="-dist-init-version-prop" depends="init">
    <exec executable="java"
          outputproperty="version.prop">
      <arg value="-jar" />
      <arg value="${dist.dir}/CropPlanning.jar" />
      <arg value="-version" />
    </exec>
  </target>


 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
 <!-- Clean up -->
 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="-dist-clean" depends="-dist-init" >

    <echo>Cleaning up distribution files.</echo>

    <delete includeemptydirs="true">
      <fileset dir="${dist.dir}" >
        <include name="*.exe" />
        <include name="*.zip" />
        <include name="*.dmg" />
        <include name="*.app/**" />
      </fileset>
    </delete>

    <delete dir="${stage.dir}" />

  </target>


 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
 <!-- Appcast                                                                -->
 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="dist-appcast" depends="dist-jarbundler,dist-launch4j,dist-zip"
          description="Generate XML to paste into appcast for this build. ">

    <echo>Appcast task START</echo>

    <loadproperties srcfile="appinfo.properties" />

    <property name="dmg.file" value="${application.title}-${version.prop}-Mac.dmg" />
    <property name="zip.win.file" value="${application.title}-${version.prop}-Win.zip" />
    <property name="zip.file" value="${application.title}-${version.prop}.zip" />

    <checksum property="dmg.checksum" file="${dist.dir}/${dmg.file}" />
    <checksum property="zip.win.checksum" file="${dist.dir}/${zip.win.file}" />
    <checksum property="zip.checksum" file="${dist.dir}/${zip.file}" />

    <length property="dmg.length" file="${dist.dir}/${dmg.file}" />
    <length property="zip.win.length" file="${dist.dir}/${zip.win.file}" />
    <length property="zip.length" file="${dist.dir}/${zip.file}" />

    <tstamp>
      <format property="current.date" pattern="MM/dd/yyyy" />
    </tstamp>

    <echo file="appcast-item-${version.prop}.xml" append="false">
      <![CDATA[<item>
        <title>]]>${program.DESCRIPTION} Version ${program.VERSION}<![CDATA[</title>
        <pubDate>]]>${current.date}<![CDATA[</pubDate>
        <sparkle:releaseNotesLink>]]>http://www.failbetterfarm.com/cps/ReleaseNotes${program.VERSION}.html<![CDATA[</sparkle:releaseNotesLink>
        <enclosure]]> url="https://github.com/claytonrcarter/cropplanning/releases/download/v${version.prop}/${dmg.file}"     sparkle:os="mac" sparkle:version="${program.BUILDNUM}" sparkle:shortVersionString="${program.VERSION}" length="${dmg.length}"     type="application/octet-stream" sparkle:dsaSignature="" sparkle:md5Sum="${dmg.checksum}"     <![CDATA[/>
        <enclosure]]> url="https://github.com/claytonrcarter/cropplanning/releases/download/v${version.prop}/${zip.win.file}" sparkle:os="win" sparkle:version="${program.BUILDNUM}" sparkle:shortVersionString="${program.VERSION}" length="${zip.win.length}" type="application/octet-stream" sparkle:dsaSignature="" sparkle:md5Sum="${zip.win.checksum}" <![CDATA[/>
        <enclosure]]> url="https://github.com/claytonrcarter/cropplanning/releases/download/v${version.prop}/${zip.file}"     sparkle:os="all" sparkle:version="${program.BUILDNUM}" sparkle:shortVersionString="${program.VERSION}" length="${zip.length}"     type="application/octet-stream" sparkle:dsaSignature="" sparkle:md5Sum="${zip.checksum}"     <![CDATA[/>
      </item>]]>
    </echo>

    <echo>Appcast task DONE</echo>

  </target>


 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
 <!-- One-JAR                                                                -->
 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <property name="one-jar.dist.dir" value="${user.home}/Software/CPS/lib/ant/onejar"/>
  <import file="${one-jar.dist.dir}/one-jar-ant-task.xml" optional="true" />

  <target name="dist-onejar" depends="init,-dist-init,-dist-init-version-prop"
          description="Cram all of the app and lib jars into a single jar.">

    <echo>One-JAR task START</echo>

    <mkdir dir="${stage.dir}" />

    <one-jar destfile="${stage.dir}/${application.title}-${version.prop}.jar">
      <manifest>
        <attribute name="One-Jar-Main-Class" value="CPS.CropPlanning" />
      </manifest>
      <main jar="${application.title}.jar" />
      <lib>
        <fileset dir="${dist.dir}">
          <include name="*.jar" />
          <include name="lib/*.jar" />
          <exclude name="${application.title}-${version.prop}.jar" />
        </fileset>
      </lib>
      <fileset dir="${build.classes.dir}">
        <include name="*.properties" />
      </fileset>
    </one-jar>

    <copy file="${stage.dir}/${application.title}-${version.prop}.jar"
          todir="${dist.dir}" />

    <delete includeemptydirs="true">
      <fileset dir="${stage.dir}" >
        <include name="*" />
      </fileset>
    </delete>

    <echo>One-JAR task DONE</echo>

  </target>


 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
 <!-- Zip                                                                    -->
 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="dist-zip" depends="dist-onejar"
          description="Create zip archive.">

    <echo>Zip task START</echo>

    <mkdir dir="${local.stage.dir}" />
    <delete includeemptydirs="true">
      <fileset dir="${local.stage.dir}" >
        <include name="*" />
      </fileset>
    </delete>

    <echo>Copying files to staging area.</echo>

    <copy file="${dist.dir}/${application.title}-${version.prop}.jar" todir="${local.stage.dir}" />
    <copy file="./gpl-3.0.txt" todir="${local.stage.dir}" />
    <copy file="./Release Notes.txt" todir="${local.stage.dir}" failonerror="false" />

    <echo>Creating zip archive.</echo>

    <zip destfile="${dist.dir}/${application.title}-${version.prop}.zip"
         basedir="${local.stage.dir}"
         level="9" />

    <echo>Zip task DONE</echo>

  </target>


 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
 <!-- JarBundler                                                             -->
 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="dist-jarbundler" depends="dist-onejar"
          description="Package main project into a Mac application bundle.">

    <taskdef name="jarbundler" classname="net.sourceforge.jarbundler.JarBundler" />

    <echo>JarBundler task START</echo>

    <mkdir dir="${stage.dir}" />
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${local.stage.dir}" >
        <include name="*" />
      </fileset>
    </delete>
    <delete includeemptydirs="true">
      <fileset dir="${stage.dir}" >
        <include name="*" />
      </fileset>
    </delete>

    <echo>Creating application bundle for Mac.</echo>

    <jarbundler dir="${stage.dir}"
                name="${application.title}"
                mainclass="com.simontuffs.onejar.Boot"
                jvmversion="1.5+"
                version="${version.prop}"
                stubfile="./universalJavaApplicationStub"
                useJavaXKey="true"
                icon="./cps-icon-nobkg.icns">

      <jarfileset dir="${dist.dir}">
        <include name="${application.title}-${version.prop}.jar" />
      </jarfileset>

    </jarbundler>

    <copy file="./gpl-3.0.txt" todir="${stage.dir}" />
    <copy file="./Release Notes.txt" todir="${stage.dir}" failonerror="false" />

    <echo>Creating disk image.</echo>

    <exec dir="." os="Mac OS X" executable="/bin/sh">
	   <arg value="-c"/>
	   <arg value="./scripts/mkdmg.sh . ${stage.dir} ${dist.dir} ${application.title}-${version.prop}-Mac" />
    </exec>

    <echo>JarBundler task DONE</echo>

  </target>


 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
 <!-- Launch4J                                                               -->
 <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="dist-launch4j" depends="dist-onejar"
          description="Package main project into a Windows application.">

    <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" />

    <echo>Launch4J task START</echo>

    <property name="local.stage.dir" value="${stage.dir}/${application.title}-${version.prop}" />
    <mkdir dir="${local.stage.dir}" />
    <delete includeemptydirs="true">
      <fileset dir="${local.stage.dir}" >
        <include name="*" />
      </fileset>
    </delete>

    <echo>Copying files to staging area.</echo>

    <copy file="./gpl-3.0.txt" todir="${local.stage.dir}" />
    <copy file="./Release Notes.txt" todir="${local.stage.dir}" failonerror="false" />

    <echo>Creating Windows executable.</echo>

<!--              dontWrapJar="true"
              jarPath="${application.title}.jar" -->
    <launch4j>
      <config headerType="gui"
              outfile="${local.stage.dir}/${application.title}.exe"
              dontWrapJar="false"
              jarPath="${dist.dir}/${application.title}-${version.prop}.jar"
              icon="./cps-icon-nobkg.ico" >
        <classPath mainClass="com.simontuffs.onejar.Boot">
          <cp>./lib</cp>
        </classPath>
        <jre minVersion="1.5.0" />
        <versionInfo fileVersion="${version.prop}.0"
                     txtFileVersion="${version.prop}"
                     fileDescription="${application.title}"
                     copyright="Copyright Clayton Carter, 2008"
                     productVersion="${version.prop}.0"
                     txtProductVersion="${version.prop}"
                     productName="${application.title}"
                     internalName="${application.title}"
                     originalFilename="${application.title}.exe" />
      </config>
    </launch4j>

    <echo>Creating zip archive.</echo>

    <zip destfile="${dist.dir}/${application.title}-${version.prop}-Win.zip"
         basedir="${local.stage.dir}"
         level="9" />

    <echo>Launch4J task DONE</echo>

  </target>

</project>
